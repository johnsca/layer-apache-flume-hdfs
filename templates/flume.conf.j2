# list sources, sinks, and channels in the agent
a1.sources = r1
a1.sinks = k1
a1.channels = c1

# source properties
a1.sources.r1.type = {{ config['protocol'] }}
a1.sources.r1.channels = c1
a1.sources.r1.bind = 0.0.0.0
a1.sources.r1.port = {{ config['source_port'] }}
{# use the following configuration if setting the port in dist.yaml
a1.sources.r1.port = {{ dist_config['ports']['avro'].values()[0] }}
#}

# channel properties
a1.channels.c1.type = memory
a1.channels.c1.capacity = {{ config['channel_capacity'] }}
a1.channels.c1.transactionCapacity = {{ config['channel_transaction_capacity'] }}

# sink properties
a1.sinks.k1.type = hdfs
a1.sinks.k1.channel = c1
a1.sinks.k1.hdfs.fileType = DataStream
a1.sinks.k1.hdfs.writeFormat = Text
a1.sinks.k1.hdfs.path = /user/flume/%{event_dir}/%Y-%m-%d
a1.sinks.k1.hdfs.useLocalTimeStamp = true
a1.sinks.k1.hdfs.rollCount = {{ config['roll_count'] }}
a1.sinks.k1.hdfs.rollInterval = {{ config['roll_interval'] }}
a1.sinks.k1.hdfs.rollSize = {{ config['roll_size'] }}
a1.sinks.k1.serializer = {{ config['sink_serializer'] }}
a1.sinks.k1.serializer.compressionCodec = {{ config['sink_compression'] }}
{% if config['sink_serializer'] == 'avro_event' %}
# suffix must be .avro for MapRed jobs to work with AVRO serialized files
a1.sinks.k1.hdfs.fileSuffix = .avro
{% endif %}
